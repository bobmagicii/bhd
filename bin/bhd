#!env php
<?php

define('AppRoot', dirname(__FILE__, 2));
require(sprintf('%s/vendor/autoload.php', AppRoot));

use Nether\Atlantis;
use Nether\Common;
use Nether\Console;

////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////

#[Console\Meta\Application('BHD', '1.0.5-dev', Phar: 'bhd.phar')]
class App
extends Atlantis\TerminalApp {

	protected Local\ConfigFile
	$Config;

	protected function
	OnReady():
	void {

		parent::OnReady();

		$Filename = Common\Filesystem\Util::Pathify(
			$this->App->GetProjectRoot(), 'data', 'bhd.json'
		);

		////////

		if(!file_exists($Filename)) {
			$this->Config = new Local\ConfigFile([ 'Filename'=> $Filename ]);
			$this->Config->Write();
		}

		else {
			$this->Config = Local\ConfigFile::FromFile($Filename);
		}

		return;
	}

	////////////////////////////////////////////////////////////////
	////////////////////////////////////////////////////////////////

	#[Console\Meta\Command('new')]
	#[Console\Meta\Info('Create a backup project.')]
	#[Console\Meta\Arg('name', 'Name of the project to create.')]
	#[Console\Meta\Value('--type', '"datetime" or "single" (Default: datetime)')]
	#[Console\Meta\Error(1, 'Name must be specified.')]
	public function
	HandleProjectNew():
	int {

		$Name = $this->GetInput(1);
		$Type = Common\Filters\Misc::OneOfTheseFirst(
			$this->GetOption('type'),
			Local\Project::Types
		);

		if(!$Name)
		$this->Quit(1);

		////////

		$Filename = $this->App->FromProjectRoot(Common\Filesystem\Util::Pathify(
			'data', 'projects', "{$Name}.json"
		));

		////////

		$Project = new Local\Project([
			'Filename' => $Filename,
			'Type'     => $Type
		]);

		$Project->Write();

		return 0;
	}

	#[Console\Meta\Command('list')]
	#[Console\Meta\Info('List the configured projects.')]
	#[Console\Meta\Toggle('--since', 'Sort by date last ran.')]
	public function
	HandleProjectList():
	int {

		$Headers = [ 'Project', 'Type', 'Last Run', 'Status', 'When' ];
		$Status = new Common\Datastore;
		$Styles = new Common\Datastore;
		$Dir = NULL;
		$Files = NULL;

		$OptSort = match(TRUE) {
			$this->GetOption('since')
			=> 'since',

			default
			=> 'name'
		};

		////////

		$Dir = $this->GetProjectDir();

		$this->PrintAppHeader('Projects');
		$this->PrintStatus($Dir);

		////////

		$Files = $this->FetchAllProjects($Dir);

		////////

		$Sorter = match($OptSort) {
			'since' => Local\Project::SorterDateRun(...),
			default => Local\Project::SorterFilename(...)
		};

		$Files->Sort($Sorter)->Revalue();

		foreach($Files as $Project) {
			/** @var Local\Project $Project */

			$Status[] = [
				str_replace('.json', '', basename($Project->Filename)),
				$Project->Type,
				$Project->GetDateLastRunShort() ?: '-',
				$Project->GetStatusWord(),
				$Project->GetTimeframeUntil()->Get() ?: '-'
			];

			$Styles[] = match(TRUE) {
				!$Project->HasRan()
				=> $this->Theme::Warning,

				$Project->IsStale()
				=> $this->Theme::Error,

				default
				=> $this->Theme::Default
			};
		}

		$this->PrintTable(
			Head:   $Headers,
			Data:   $Status->Export(),
			Styles: $Styles->Export()
		);

		return 0;
	}

	#[Console\Meta\Command('dir')]
	#[Console\Meta\Info('Add a local or remote directory to back up over here.')]
	#[Console\Meta\Arg('project', 'Name of the project to edit.')]
	#[Console\Meta\Arg('path', 'Path to backup')]
	#[Console\Meta\Toggle('--del', 'Remove from project instead.')]
	#[Console\Meta\Error(1, 'already exists: %s %s')]
	#[Console\Meta\Error(2, 'project not found: %s')]
	public function
	HandleProjectDir():
	int {

		$ProjectName = $this->GetInput(1);
		$Path = $this->GetInput(2);
		$OptDelete = $this->GetOption('del');

		$Filename = NULL;
		$Project = NULL;
		$Exists = NULL;

		////////

		if(!$ProjectName) {
			$ProjectName = $this->QueryUserToSelectProject();
			$Path = $this->QueryUserForPath();
		}

		$Filename = $this->GetPathToProject($ProjectName);
		$Project = $this->GetProject($Filename, 2);
		$Exists = (
			($Project->Dirs)
			->Distill(fn(Local\ProjectDir $D)=> $D->Path === $Path)
			->IsNotEmpty()
		);

		////////

		if($OptDelete) {
			$this->PrintStatus("Removing {$Path} from {$ProjectName}");

			if($Exists)
			$Project->Dirs->Filter(fn(Local\ProjectDir $D)=> $D->Path !== $Path);
		}

		else {
			$this->PrintStatus("Adding {$Path} to {$ProjectName}");

			if(!$Exists)
			$Project->Dirs->Push(Local\ProjectDir::New($Path));
		}

		$Project->Write();

		return 0;
	}

	#[Console\Meta\Command('repo')]
	#[Console\Meta\Info('Add a Git repository to back up over here.')]
	#[Console\Meta\Arg('project', 'Name of the project to edit.')]
	#[Console\Meta\Arg('repo-url', 'Path to backup')]
	#[Console\Meta\Toggle('--del', 'Remove from project instead.')]
	#[Console\Meta\Error(1, 'Already Exists: %s %s')]
	public function
	HandleProjectRepo():
	int {

		$ProjectName = $this->GetInput(1);
		$Path = $this->GetInput(2);
		$OptDelete = $this->GetOption('del');

		$Filename = NULL;
		$Project = NULL;
		$Exists = NULL;

		////////

		if(!$ProjectName) {
			$ProjectName = $this->QueryUserToSelectProject();
			$Path = $this->QueryUserForRepo();
		}

		$Filename = $this->GetPathToProject($ProjectName);
		$Project = Local\Project::FromFile($Filename);
		$Exists = (
			($Project->Repos)
			->Distill(fn(Local\ProjectRepo $D)=> $D->Path === $Path)
			->IsNotEmpty()
		);

		////////

		if($OptDelete) {
			$this->PrintStatus("Removing {$Path} from {$ProjectName}");

			if($Exists)
			$Project->Repos->Filter(fn(Local\ProjectRepo $D)=> $D->Path !== $Path);
		}

		else {
			$this->PrintStatus("Adding {$Path} to {$ProjectName}");

			if(!$Exists)
			$Project->Repos->Push(Local\ProjectRepo::New($Path));
		}

		$Project->Write();

		return 0;
	}

	#[Console\Meta\Command('db')]
	#[Console\Meta\Info('Add a project.atl configured DB to backup over here.')]
	#[Console\Meta\Arg('project', 'Name of the project to edit.')]
	#[Console\Meta\Arg('db', 'DB to backup.')]
	#[Console\Meta\Value('--tunnel', 'Host to shell into first.')]
	#[Console\Meta\Toggle('--del', 'Remove from project instead.')]
	#[Console\Meta\Error(1, 'Already Exists: %s %s')]
	public function
	HandleProjectDatabase():
	int {

		$ProjectName = $this->GetInput(1);
		$Alias = $this->GetInput(2);
		$OptDelete = $this->GetOption('del');
		$OptTunnelHost = $this->GetOption('tunnel');

		$Filename = NULL;
		$Project = NULL;
		$Exists = NULL;

		////////

		if(!$ProjectName) {
			$ProjectName = $this->QueryUserToSelectProject();
			$Alias = $this->QueryUserForDBAlias();

			if(!$OptDelete)
			$OptTunnelHost = $this->QueryUserForDBTunnel();
		}

		$Filename = $this->GetPathToProject($ProjectName);
		$Project = Local\Project::FromFile($Filename);
		$Exists = (
			($Project->Databases)
			->Distill(fn(Local\ProjectDatabase $D)=> $D->Alias === $Alias)
			->IsNotEmpty()
		);

		////////

		if($OptDelete) {
			$this->PrintStatus("Removing {$Alias} from {$ProjectName}");

			if($Exists)
			$Project->Databases->Filter(fn(Local\ProjectDatabase $D)=> $D->Alias !== $Alias);
		}

		else {
			$this->PrintStatus("Adding {$Alias} to {$ProjectName}");

			if(!$Exists)
			$Project->Databases->Push(Local\ProjectDatabase::New(
				Alias: $Alias,
				TunnelHost: $OptTunnelHost
			));
		}

		$Project->Write();

		return 0;
	}

	#[Console\Meta\Command('run')]
	#[Console\Meta\Info('Perform project backup routine now.')]
	#[Console\Meta\Arg('project', 'Name of the project to run.')]
	#[Console\Meta\Error(1, 'commands reported errors')]
	public function
	HandleProjectRun():
	int {

		$Now = new Common\Date;
		$RTimer = new Common\Timer;
		$CTimer = new Common\Timer;
		$TFrame = new Common\Units\Timeframe(0);
		$Name = $this->GetInput(1);
		$File = $this->GetPathToProject($Name);
		$Dest = $this->GetPathToStorage($Name);
		$Project = Local\Project::FromFile($File);
		$Commands = $Project->Run($Dest);

		$CLI = NULL;
		$Key = NULL;
		$Cmd = NULL;
		$Err = NULL;

		////////

		$this->PrintAppHeader(sprintf(
			'Running Backup "%s"',
			$Name
		));

		$RTimer->Start();

		foreach($Commands as $Key => $Cmd) {
			$this->PrintH2("Running {$Key}...");
			$this->PrintLn($Cmd, 2);

			$CTimer->Reset();
			$CTimer->Start();

			$CLI = new Console\Struct\CommandLineUtil($Cmd);
			$CLI->Run();

			$CTimer->Stop();
			$TFrame->SetStop(max(1, $CTimer->Get()));

			if($CLI->Error !== 0) {
				$Err = TRUE;

				$this->PrintLn();
				$this->PrintStatusWarning(sprintf(
					'Exit Code: %d (%s)', $CLI->Error, $TFrame
				));

				continue;
			}

			$this->PrintStatusMuted(sprintf(
				'Done (%s, %s)', $Key, $TFrame
			));

			continue;
		}

		$RTimer->Stop();
		$TFrame->SetStop(max(1, $RTimer->Get()));

		////////

		if($Err) {
			$this->PrintError(sprintf(
				'CHECK OUTPUT (%s, %s)', $Name, $TFrame
			));

			return 1;
		}

		$this->PrintOK(sprintf(
			'Done (%s, %s)', $Name, $TFrame
		));

		$Project->UpdateLastRun($Now);
		$Project->Write();

		return 0;
	}

	#[Console\Meta\Command('autorun')]
	#[Console\Meta\Info('Backup all the projects that have gone stale by now.')]
	#[Console\Meta\Toggle('--json', 'Print report as JSON.')]
	#[Console\Meta\Toggle('--quiet', 'No output.')]
	public function
	HandleProjectAutorun():
	int {

		$Dir = $this->GetProjectDir();
		$Projects = $this->FetchAllProjects($Dir);
		$Results = NULL;
		$Skip = NULL;
		$Done = NULL;
		$Fail = NULL;
		$Report = NULL;

		$OptJSON = $this->GetOption('json') ?? FALSE;
		$OptQuiet = $this->GetOption('quiet') ?? FALSE;

		////////

		$Results = $Projects->Map(function(Local\Project $P) use($OptQuiet): int {

			if(!$P->IsStale())
			return -1;

			$Cmd = sprintf(
				'%s %s run %s',
				escapeshellarg(PHP_BINARY),
				escapeshellarg(__FILE__),
				escapeshellarg($P->GetName())
			);

			if(!$OptQuiet)
			$this->PrintLn($Cmd);

			$CLI = new Console\Struct\CommandLineUtil($Cmd);
			$CLI->Run();

			return $CLI->Error;
		});

		////////

		$Skip = $Results->Distill(fn(int $Err)=> $Err === -1);
		$Fail = $Results->Distill(fn(int $Err)=> $Err > 0);
		$Done = $Results->Distill(fn(int $Err)=> $Err === 0);

		$Report = [
			'Done' => $Done->Count(),
			'Skip' => $Skip->Count(),
			'Fail' => $Fail->Count()
		];

		if($OptJSON) {
			if(!$OptQuiet)
			$this->PrintLn(json_encode($Report));

			return 0;
		}

		if(!$OptQuiet)
		$this->PrintBulletList($Report);

		return 0;
	}

	#[Console\Meta\Command('set')]
	#[Console\Meta\Info('Set config options in bhd.conf.')]
	#[Console\Meta\Value('--backup-root', 'The path to store the backups in. (default: NULL, meaning local data folder')]
	public function
	HandleSetConfig():
	int {

		$OptBackupRoot = $this->GetOption('backup-root');

		////////

		if($OptBackupRoot !== NULL) {
			if(is_string($OptBackupRoot) && $OptBackupRoot !== '')
			$this->Config->BackupRoot = $OptBackupRoot;

			if($OptBackupRoot === TRUE || $OptBackupRoot === '')
			$this->Config->BackupRoot = NULL;
		}

		////////

		$this->Config->Write();

		return 0;
	}

	////////////////////////////////////////////////////////////////
	////////////////////////////////////////////////////////////////

	protected function
	GetProject(string $Filename, int $ExitCode):
	Local\Project {

		$Output = NULL;
		$Err = NULL;

		////////

		try { $Output = Local\Project::FromFile($Filename); }
		catch(Common\Error\FileNotFound $Err) {
			$this->Quit($ExitCode, $Err->Filename);
		}

		////////

		return $Output;
	}

	protected function
	GetPathToProject(string $ProjectName):
	string {

		$Filename = $this->App->FromProjectRoot(Common\Filesystem\Util::Pathify(
			'data', 'projects', "{$ProjectName}.json"
		));

		return $Filename;
	}

	protected function
	GetPathToStorage(string $ProjectName):
	string {

		if($this->Config->BackupRoot !== NULL) {
			if(!file_exists($this->Config->BackupRoot))
			Common\Filesystem\Util::MkDir($this->Config->BackupRoot);

			if(!is_dir($this->Config->BackupRoot))
			throw new Common\Error\DirNotFound($this->Config->BackupRoot);

			return Common\Filesystem\Util::Pathify(
				$this->Config->BackupRoot,
				$ProjectName
			);
		}

		////////

		return $this->App->FromProjectRoot(Common\Filesystem\Util::Pathify(
			'data', 'backups', $ProjectName
		));
	}

	protected function
	GetProjectDir():
	string {

		$Dir = Common\Filesystem\Util::Pathify(
			$this->App->GetProjectRoot(),
			'data', 'projects'
		);

		if(!file_exists($Dir))
		Common\Filesystem\Util::MkDir($Dir);

		if(!is_dir($Dir))
		throw new Common\Error\DirNotFound($Dir);

		return $Dir;
	}

	protected function
	FetchAllProjects(string $Dir):
	Common\Datastore {

		$Projects = (
			Common\Filesystem\Indexer::DatastoreFromPath($Dir)
			->Filter(fn(string $F)=> str_ends_with($F, '.json'))
			->Remap(fn(string $F)=> Local\Project::FromFile($F))
		);

		return $Projects;
	}

	////////////////////////////////////////////////////////////////
	////////////////////////////////////////////////////////////////

	protected function
	QueryUserToSelectProject(?Common\Datastore $Projects=NULL):
	string {

		$PDir = $this->GetProjectDir();
		$Projects = $this->FetchAllProjects($PDir);
		$Prompt = NULL;
		$Name = NULL;

		////////

		$this->PrintH2('Select Project...');
		$this->PrintBulletList($Projects->Map(fn(Local\Project $P)=> $P->GetName()));

		$Prompt = $this->PromptForValue('Project Name', 'string/int', TRUE);

		////////

		$Name = match(TRUE) {
			(Common\Values::IsNumericDec($Prompt))
			=> $Projects->Get( ((int)$Prompt) - 1 )->GetName(),

			default
			=> $Prompt
		};

		////////

		return $Name;
	}

	protected function
	QueryUserForPath():
	string {

		$Path = $this->PromptForValue('Directory', 'string<filepath>', TRUE);

		return $Path;
	}

	protected function
	QueryUserForRepo():
	string {

		$Path = $this->PromptForValue('Git Repo URL', 'string<url>', TRUE);

		return $Path;
	}

	protected function
	QueryUserForDBAlias():
	string {

		$Path = $this->PromptForValue('Database Connection', 'string<alias>', TRUE);

		return $Path;
	}

	protected function
	QueryUserForDBTunnel():
	?string {

		$Path = trim($this->PromptForValue('Tunnel via', 'string<domain>', TRUE));

		if(!$Path)
		$Path = NULL;

		return $Path;
	}

};

exit(App::Realboot([
	'AppRoot' => AppRoot
]));

